import React from 'react'
import { a, useSpring, config,  } from '@react-spring/web'
import { useDrag } from '@use-gesture/react'

import styles from './styles.module.css'

//* a – обёртка для создания анимированных HTML-элементов;

//*? config – набор предустановок для конфигурации анимаций
//* config.wobbly - позволяет анимации проявлять «упругость» и динамичность
//* config.stiff - создаёт ощущение более жёсткого, «твёрдого» движения

//*? useSpring для создания анимированного значения { y }
//* изначально установлено равным height означает, что нижний лист изначально скрыт за нижней границей экрана.

//* open – функция, которая анимирует смещение y в 0 (открытие листа).
//* параметр "canceled" сигнализирует, что пользователь превысил порог жеста, 
//* и в этом случае применяется «wobbly»-конфигурация для создания «подпрыгивающего» эффекта.

//* close – функция, возвращает в исходное состояние (закрытое положение, y равен height).
//* "velocity" позволяет добавить динамику анимации в зависимости от скорости жеста.

//*? useDrag используется для отслеживания перетаскивания
//* last – индикатор завершения жеста (пользователь отпустил элемент)
//* velocity и direction – скорость и направление жеста (исп только их вертикальные компоненты: vy и dy)
//* offset – смещение жеста (берётся y-компонента oy);
//* cancel – функция, позволяющая прервать текущий жест
//* canceled – индикатор, что жест был отменён

//*? Решение при окончании жеста (last = true)
//* смещение oy больше половины высоты (height * 0.5) 
//* или если скорость перетаскивания vy превышает 0.5 и направление говорит о движении вниз (dy > 0), 
//* вызывается функция close, что приводит к закрытию листа.
//* В противном случае вызывается open (с передачей параметра canceled), чтобы вернуть лист в открытое положение

//*? Во время перетаскивания
//* Если жест ещё не завершён, значение y обновляется мгновенно в соответствии с текущим смещением oy, 
//* что позволяет листу следовать за движением курсора или пальца

//*? Конфигурация useDrag
//* from: () => [0, y.get()] – начальное положение жеста берётся из текущего значения y
//* filterTaps: true – чтобы простые клики не считались жестами
//* bounds: { top: 0 } – ограничение, не позволяющее перемещать лист выше определённой границы
//* rubberband: true – добавляет эффект «резинки» при попытке перетаскивания за установленные пределы

//*? Управление отображением листа
//* Значение y преобразуется в CSS-свойство display с помощью метода 
//* .to() – если y меньше высоты листа (height), отображается как block, иначе – none. Помогает скрыть элемент, когда он полностью закрыт

//*? bgStyle, 
//* вычисляет трансформацию (transform) и прозрачность (opacity) в зависимости от текущего значения y. 
//* преобразования могут быть полезны, например, для затемнения фона или создания эффекта масштабирования.

//*? Контейнер компонента
//* используется класс flex и стиль overflow: hidden, чтобы скрывать любые выпадающие за пределы контейнера части элемента.

//*? Кнопка действия:
//* styles.actionBtn выступает в роли кнопки. При клике по ней вызывается функция open, которая открывает лист.

//*? Анимированный нижний лист
//* используется компонент a.div из react-spring
//* которому передаются свойства bind() для обработки жестов
//* display, зависящий от текущего положения листа
//* значение bottom, которое позиционирует лист относительно нижней части экрана
//* анимированное значение y, которое определяет вертикальное смещение листа.

//* высота bottom sheet
const height = 450


const GestureBottomSheet: React.FC = () => {
	const [{ y }, api] = useSpring(() => ({ y: height }))

	const open = ({ canceled }) => {
	  api.start({ y: 0, immediate: false, config: canceled ? config.wobbly : config.stiff })
	}

	const close = (velocity = 0) => {
	  api.start({ y: height, immediate: false, config: { ...config.stiff, velocity } })
	}
  
	const bind = useDrag(
	  ({ last, velocity: [, vy], direction: [, dy], offset: [, oy], cancel, canceled }) => {
		if (oy < -70) cancel()
  
		if (last) {
		  oy > height * 0.5 || (vy > 0.5 && dy > 0) ? close(vy) : open({ canceled })
		} else api.start({ y: oy, immediate: true })
	  },

	  { from: () => [0, y.get()], filterTaps: true, bounds: { top: 0 }, rubberband: true }
	)
  
	const display = y.to((py) => (py < height ? 'block' : 'none'))
  
	const bgStyle = {
	  transform: y.to([0, height], ['translateY(-8%) scale(1.16)', 'translateY(0px) scale(1.05)']),
	  opacity: y.to([0, height], [0.4, 1], 'clamp')
	}

  return (
	<div className="flex" style={{ overflow: 'hidden' }}>
		<div className={styles.actionBtn} onClick={open} />
		
		<a.div className={styles.sheet} {...bind()} style={{ display, bottom: `calc(-100vh + ${height - 100}px)`, y }}>
			<div>bottom sheet</div>
		</a.div>
  	</div>
  )
}

export default GestureBottomSheet

